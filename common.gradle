apply plugin: 'java'
apply plugin: 'maven'

String mavenGroupId = 'com.qubit'
String mavenVersion = '2.0.11'
String mavenArtifactId = name.replace("modules/", "")

group = mavenGroupId
version = mavenVersion

//jar {
//    manifest {
//        attributes 'Main-Class': 'com.qubit.opentag.ping.PingServer'
//    }
//}
subprojects {
    tasks.withType(Jar) {
        archivesBaseName = archivesBaseName - "modules/"
    }
}

def fatJarBaseName = project.name;

task fatJar(type: Jar) {
  classifier = 'all'
  baseName = fatJarBaseName
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  with jar
  manifest {
      attributes 'Main-Class': 'com.qubit.topnet.Demo'
  }
}

task debug (type: JavaExec) {
  if (project.hasProperty("mainClass")){
    main = mainClass
  }
  classpath = sourceSets.main.runtimeClasspath
  jvmArgs = ["-Xdebug","-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005"]
  if (project.hasProperty("mainArgs")){
      args Eval.me(mainArgs)
  }
}

task run (type: JavaExec) {
  if (project.hasProperty("mainClass")){
    main = mainClass
  }
  classpath = sourceSets.main.runtimeClasspath
  jvmArgs = []
  if (project.hasProperty("mainArgs")){
      args Eval.me(mainArgs)
  }
}

task sourcesJar(type: Jar, 
  dependsOn: classes, 
  description: 'Creates a jar from the source files.') {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives jar
  archives sourcesJar
  archives fatJar
}

configure(install.repositories.mavenInstaller) {
  pom.project {
    groupId = mavenGroupId
    artifactId = mavenArtifactId
    version = mavenVersion
  }
}

sourceCompatibility = '1.8'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

repositories {
  mavenCentral()
  mavenLocal()
  maven { 
    url ""
  }
}

dependencies {
  // Adding dependencies here will add the dependencies to each subproject.
  testCompile group: 'junit', name: 'junit', version: '4.10'
}

task createFolders(
  description: 'Creates the source folders if they do not exist.') doLast {
  sourceSets*.allSource*.srcDirs*.each { File srcDir ->
    if (!srcDir.isDirectory()) {
      println "Creating source folder: ${srcDir}"
      srcDir.mkdirs()
    }
  }
}

def isWindows () {
  return (Os.isFamily(Os.FAMILY_WINDOWS))
}

def installRemoteAll = false
def installRemoteAllSnapshots = false

uploadArchives {
  //logger.warn "installRemoteAll: "+ installRemoteAll +", installRemoteAllSnapshots: " + installRemoteAllSnapsots
  if (installRemoteAll) {
    repositories.mavenDeployer {
        repository(
          url: "http://opentag-test.qubitproducts.com/mvn/repository/internal/") {
            authentication(userName: "maven", password: "...")
            pom.groupId = mavenGroupId
            pom.artifactId = mavenArtifactId
            pom.version = mavenVersion
        }
    }
  }
  if (installRemoteAllSnapshots) {
    repositories.mavenDeployer {
        repository(
          url: "http://opentag-test.qubitproducts.com/mvn/repository/snapshots/") {
            authentication(userName: "maven", password: "...")
            pom.groupId = mavenGroupId
            pom.artifactId = mavenArtifactId
            pom.version = mavenVersion
        }
    }
  }
}

uploadArchives.dependsOn install

// doesnt work, fix it man
task uploadArchivesSnapshot << {
  installRemoteAllSnapshots = true
  tasks.uploadArchives.execute()
}

task uploadArchivesRelease << {
  installRemoteAll = true
  tasks.uploadArchives.execute()
}

//this will make sure all jars are locally installed
allprojects {
  jar.finalizedBy install
  fatJar.finalizedBy install
}

allprojects {
  install.finalizedBy uploadArchives
}

